Soluton of that question:-

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int res = 0;
        for (int i = 1; i < prices.size(); i++) {
            if (prices[i] > prices[i - 1]) {
                res += prices[i] - prices[i - 1];
            }
        }
        return res;
    }
};

**Explanation:**


1. It initializes a variable `res` to track the total profit.

2. The method then iterates through the `prices` vector using a `for` loop, starting from the second element (`i = 1`).

3. Inside the loop:
   - It checks if the current price (`prices[i]`) is higher than the previous day's price (`prices[i - 1]`).
   - If true, it adds the profit obtained by selling at the current price to the total profit (`res`).

4. After iterating through the entire vector, the method returns the total profit.

This code utilizes a simplified approach where it calculates the profit on each day and adds it to the total profit if there's a positive difference between consecutive day prices. This avoids the need for tracking the minimum price and directly calculates the total profit in a single pass. The time complexity of this solution is O(n), where n is the size of the `prices` vector.
