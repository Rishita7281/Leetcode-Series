Solution of the give problem:-

class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head){
            if(head==NULL || head->next==NULL){
                return NULL;
            }
            else{
                 ListNode* temp=head;
                  while(temp->next!=NULL)
                { if(temp->val==temp->next->val){
                    temp->next=temp->next->next;
                    }
                    else{
                        temp=temp->next;
                    }
                    
                }
                return head;}};
  
   Explanation of the above code:-

1:-ListNode* deleteDuplicates(ListNode* head) {

This line declares the function deleteDuplicates which takes a pointer to the head of a linked list (ListNode* head) as a parameter and returns a pointer to the head of the modified linked list.
2:-if (head == NULL || head->next == NULL) { return NULL; }

This line checks if the linked list is either empty (head == NULL) or has only one node (head->next == NULL). In such cases, there are no duplicates to remove, so the function returns NULL (an empty list).
3:-else {

If the linked list has more than one node, the function proceeds to the else block.
4:-ListNode* temp = head;

This line declares a pointer temp and initializes it with the address of the head of the linked list. This pointer is used to traverse the list.
5:-while (temp->next != NULL) {

This starts a while loop that iterates through the linked list until temp reaches the last node (i.e., temp->next becomes NULL).
6:-if (temp->val == temp->next->val) { temp->next = temp->next->next; }

Inside the loop, this line checks if the current node's value (temp->val) is equal to the value of the next node (temp->next->val). If they are equal, it means a duplicate is found. In that case, it skips the next node by updating the next pointer of the current node to point to the node after the next node.
7:-else { temp = temp->next; }

If the values are not equal, it means the current node is distinct. In this case, it moves the temp pointer to the next node.
}

This closes the while loop.
return head;

After the loop, the function returns the pointer to the head of the modified linked list, which has duplicates removed.
