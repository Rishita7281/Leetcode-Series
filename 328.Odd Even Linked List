Solution of the given problem:-
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
       ListNode* oddh=nullptr,*oddt=nullptr,*evenh=nullptr,*event=nullptr;
       int count=1;
       while(head!=nullptr){
           if(count%2==0){
           if(evenh==nullptr){
               evenh=event=head;
               head=head->next;}
           else{
               event->next=head;
               event=event->next;
               head=head->next;}}
               else{
               if(oddh==nullptr){
                   oddh=oddt=head;
                   head=head->next;}
               else{
                   oddt->next=head;
                   oddt=oddt->next;
                   head=head->next;
               }}
               count++;}
           if(oddh==nullptr){
               return evenh;
           }
           if(evenh==nullptr){
               return oddh;
           }
       event->next=nullptr;
       oddt->next=evenh;
       return oddh;}
};

Explanation of the above code:-
Initialization of Pointers:

ListNode* oddh = nullptr, *oddt = nullptr, *evenh = nullptr, *event = nullptr;: Initializes pointers for the head (oddh, evenh) and tail (oddt, event) of both the odd and even sublists. These pointers will be used to construct the modified linked list.
Traversal and Splitting:

The code traverses the original linked list and splits the nodes into two sublists based on whether their indices are odd or even.
Handling Odd Sublist:

If the current index is odd, the node is added to the odd sublist.
If the odd sublist is empty, set oddh and oddt to the current node. Otherwise, append the node to the existing odd sublist.
Handling Even Sublist:

If the current index is even, the node is added to the even sublist.
If the even sublist is empty, set evenh and event to the current node. Otherwise, append the node to the existing even sublist.
Connecting Odd and Even Sublists:

After traversal, if either of the sublists is empty, return the head of the non-empty sublist.
Otherwise, connect the last node of the odd sublist (oddt) to the head of the even sublist (evenh).
Adjusting Pointers:

event->next = nullptr;: Set the next pointer of the last node in the even sublist to nullptr to terminate the modified linked list.
oddt->next = evenh;: Connect the last node of the odd sublist to the head of the even sublist.
Returning the Result:

return oddh;: Return the head of the modified linked list.
